generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listing {
  id               String    @id @default(cuid())
  heading          String
  subheading       String?
  secondaryContent String?
  description      String?
  availableFrom    DateTime?
  accpetingTags    String[]  @default([])
  address          String?
  billsIncluded    Boolean   @default(false)
  createdAt        DateTime  @default(now())
  inspectAvailable Boolean   @default(false)
  noBathrooms      Int       @default(0)
  noBeds           Int       @default(0)
  noFlatmates      Int       @default(0)
  price            Int
  propertyFeatures String[]  @default([])
  type             String
  updatedAt        DateTime  @updatedAt
  weeklyRent       Int
  favorites Favorite[]
  rooms            Room[]
}

model PersonListing {
  id                        String   @id @default(cuid())
  name                      String
  budget                    Int
  location                  String?
  image                     String?
  stayLength                Int
  moveInDate                DateTime
  description               String?
  verification              String?
  tags                      String[]
  preferences               String[]
  oneLiner                  String?
  preferedLocation          String?
  furnishedRoom             String?
  maxNoFlatmates            String?
  parking                   String?
  bathRoom                  String?
  internet                  String?
  preferedAccommodationType String[]
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model Room {
  id               String   @id @default(cuid())
  name             String
  type             String
  location         String?
  description      String?
  aboutFlatmate    String?
  noBeds           Int
  noBathrooms      Int
  noFlatmates      Int
  author           String?
  propertyFeatures String[]
  acceptingTags    String[]
  inspectAvailable Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  weeklyRent       Int
  bond             Int?
  roomType         String?
  stayLength       Int?
  roomFeatures     String[]
  furnished        String?
  internet         String?
  online           String?
  authorAvatar     String?
  responseRate     String?
  parking          String?
  bathRoom         String?
  bills            String?
  acceptedPeople   String?
  images           String[]
  listingId        String?
  listing          Listing?  @relation(fields: [listingId], references: [id])
}


model FeatureListing {
  name    String @id
  svgLink String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  favorites Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  user      User     @relation(fields: [userId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id])

  @@unique([userId, listingId])
}